How to handle rexmission if the size of the xmit buffer is 15000 bytes. Should we just assume that rexmit is rare and that it will incur some greater penalty (fetching from over DMA). Needs to be larger then RTTbytes?

Rpc_buffer needs to consider the left shift

Virtualization?

RPC should be larger than 2^14. LIFO increases risk of old packet being dislodged. Could also tag the RPC ids somehow.

High level figure showing pipeline and fifo interfaces to all of the cores

If the message is short < 1000 bytes, it should bypass DMA (and maybe the SRPT system)

The streams will need to be deeper in certain places? Or will the writes just stall and it will be fine?

Can pipelining be properly performed with blocking reads and writes? It may only allow for a single read to be placed before a result is read. This would create large latency stalls.

Simpler hash function?

Is a peer map even really needed?

Where to place unscheduled bytes in DMA space?

How does ethernet mac subsytem handle the empty chunks in the last packet chunk? The tlast of the AXI Stream is used to assert the completition of an ethernet frame.
    - Is this why the AXI Stream runs at 322 MHz??

Timer core needs to be looped in

ACKs need to be sent

Defficiencies of the SRPT queue:
  - Large 1024 cycle recovery time in the event of a wakeup
  - Is based on grantable bytes rather than the remaining bytes to grant. Basing off of remaining bytes to grant would require updating the elements as they are in the queue
    The problem here is that the best options coming from the queue will not reflect the changing desirability of granting to packets based on whether we have recieved data

The grant srpt queue should update its recv bytes based on NEW data. Not duplicates. This probably requires visiting the timer core.

Need to test the data buffer buffering feature to fetch host memory

What is the proximity of multiple sendmsg requests. Does stalling the propagation of a sendmsg to wait for data block out shorter messages?

How do we determine who to return the recvmsg request to? Is it based on port?

* Is it fine to trigger behavior off the incoming packet offset being 0? Should we start saving data even if the first packet has not arrived?
