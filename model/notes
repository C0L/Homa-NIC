simulatior with hosts SRPTing on sending and receiving data
  - Every machine is connected though a switch that has input and output queues for each host of fixed size
  - I have picked some reasonable values for the rtt time, the overcommitment of receivers, the intrinsic delay of the network. There are a lot of knobs here though.
  - I can configure some number of hosts to be senders, receivers or both. This will let us test uniform or bipartite sender receiver structures
  - I can specify a set of distributions to the hosts. So currently I specify two distributions like we talked about a RPC distribution and an Backup distribution
    * Currently in pure SRPT none of the Backup messages ever complete. But I think the aggregate demand is greater than capacity so there is a buildup of short messages which will always take precidence

  - I think next I need some burstier distribution. Because if the aggregate demand is less than the capacity and that demand is uniform this does not really fill up the priority queue.
    * But if I increase the aggregate demand beyond the capcity there are a constant enough stream of short messages they message throughput remaings high.


# TODO emph that flow control feedback benefits frim smaller rtts and thus use prefetcher
# TODO does the topology of the switch make sense
# TODO not normalized for number of messages
# TODO what axes to compare (msg rate, payload sizes, size of on-chip queue, size of off-chip queue, size of on-chip cache). Number of senders/receivers
# Compare infinitely large on chip queue to other constructions
# TODO compute the "movement" of elements based on depth in queue
# TODO also need to measure latency
# TODO completion time should be measured by receivers
# TODO maybe also measure starvation?
# overcommitment?

# Uniform -> bipartite half senders -> half receivers
# vary destination distribution
# When does this not work
# Deadline aware datacenter TCP
# pfabric workloads
# aggregate demand less than capacity!!! <- important
# poisson is too favorable. need something bursty
# some work is generated independently (small RPCs), some work is responsive to performance (while every so often download petabyte)
# b4 paper, most traffic is low priority



# Can all scheduling decisions be made at time of enqueue
#   Processor sharing + SRPT? Seems like a lot of long activate deactive cycles. Maybe you want to weight SRPT somehow within the SRPT queue.
#   Multiple RPCs over a single flow. Maybe this is the norm for TCP based RPC systems? Would not want a seperate flow for each recevier. Would not want to startup a TCP connection for a new RPC
#   Simplicity of design?
#   Granting system?
#   Updates to individual flows? Starvation prevention?
#   No-reneging of windows?
#   Active queue management?

# Look into least slack time first

# Simulation Parameters:
#   - PCIe throughput 
#   - Link throughput  
#   - PCIe latency
#   - Number of simultanous connections
#   - Cache size 
#   - Distribution of incoming data message lengths
#   - Number of simultanous users? Is the data interleaved or more like Homa?
#   - Distribution of outgoing data message lengths

# Simulation Evaluation:
#   - Time to completion
#   - P99 completion time
#   - Some measure of latency?
'''